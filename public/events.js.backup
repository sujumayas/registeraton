// Global state
let events = [];
let eventSource = null;
let currentEventId = null;
let isEditing = false;

// Initialize app
document.addEventListener('DOMContentLoaded', () => {
  initializeEventSource();
  loadEvents();
  setupEventHandlers();
});

// Set up Server-Sent Events for real-time updates
function initializeEventSource() {
  eventSource = new EventSource('/events');

  eventSource.onmessage = (event) => {
    const data = JSON.parse(event.data);

    if (data.type === 'event_created') {
      events.unshift(data.event);
      renderEvents();
      window.NotificationManager.success('Event created successfully!');
    } else if (data.type === 'event_updated') {
      const index = events.findIndex(e => e.id === data.event.id);
      if (index !== -1) {
        events[index] = data.event;
        renderEvents();
      }
    } else if (data.type === 'event_deleted') {
      events = events.filter(e => e.id !== data.id);
      renderEvents();
      window.NotificationManager.success('Event deleted successfully');
    }
  };

  eventSource.onerror = (error) => {
    console.error('SSE Error:', error);
    // Close the old connection before creating a new one to prevent memory leaks
    if (eventSource) {
      eventSource.close();
    }
    setTimeout(() => {
      initializeEventSource();
    }, 3000);
  };
}

// Load all events
async function loadEvents() {
  try {
    const response = await fetch('/api/events');
    if (!response.ok) throw new Error('Failed to load events');

    events = await response.json();
    renderEvents();
  } catch (error) {
    console.error('Error loading events:', error);
    window.NotificationManager.error('Failed to load events');
  }
}

// Render events grid
function renderEvents() {
  const grid = document.getElementById('eventsGrid');

  if (events.length === 0) {
    grid.innerHTML = '<div class="no-events">No events yet. Click "Create New Event" to get started.</div>';
    return;
  }

  grid.innerHTML = events.map(event => {
    const date = event.event_date ? formatDate(event.event_date) : 'No date set';
    const createdDate = formatDateTime(event.created_at);

    return `
      <div class="event-card" data-id="${event.id}">
        <div class="event-card-header">
          <h3>${escapeHtml(event.name)}</h3>
          <div class="event-card-actions">
            <button class="btn-icon" onclick="editEvent(${event.id})" title="Edit">
              <svg width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor">
                <path d="M11.333 2A1.886 1.886 0 0 1 14 4.667l-9 9-3.667.666.667-3.666 9-9z" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
            <button class="btn-icon btn-delete" onclick="showDeleteModal(${event.id})" title="Delete">
              <svg width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor">
                <path d="M2 4h12M5.333 4V2.667a1.333 1.333 0 0 1 1.334-1.334h2.666a1.333 1.333 0 0 1 1.334 1.334V4m2 0v9.333a1.333 1.333 0 0 1-1.334 1.334H4.667a1.333 1.333 0 0 1-1.334-1.334V4h9.334z" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="event-card-body">
          <div class="event-meta">
            <span class="event-date">ðŸ“… ${date}</span>
            <span class="event-created">Created ${createdDate}</span>
          </div>
          ${event.description ? `<p class="event-description">${escapeHtml(event.description)}</p>` : ''}
          <div class="event-stats" id="stats-${event.id}">
            <div class="stat-loading">Loading stats...</div>
          </div>
        </div>
        <div class="event-card-footer">
          <button class="btn-primary btn-block" onclick="openEvent(${event.id})">
            Open Registration â†’
          </button>
        </div>
      </div>
    `;
  }).join('');

  // Load stats for each event
  events.forEach(event => loadEventStats(event.id));
}

// Load stats for a specific event
async function loadEventStats(eventId) {
  try {
    const response = await fetch(`/api/events/${eventId}/stats`);
    if (!response.ok) throw new Error('Failed to load stats');

    const stats = await response.json();
    const statsDiv = document.getElementById(`stats-${eventId}`);

    if (!statsDiv) return;

    statsDiv.innerHTML = `
      <div class="stat-item">
        <strong>${stats.total}</strong>
        <span>Registered</span>
      </div>
      <div class="stat-item">
        <strong>${stats.preRegistered.pending}</strong>
        <span>Pending</span>
      </div>
    `;
  } catch (error) {
    console.error('Error loading event stats:', error);
  }
}

// Setup event handlers
function setupEventHandlers() {
  const createBtn = document.getElementById('createEventBtn');
  const modal = document.getElementById('eventModal');
  const modalClose = document.getElementById('modalClose');
  const cancelBtn = document.getElementById('cancelBtn');
  const eventForm = document.getElementById('eventForm');
  const deleteModal = document.getElementById('deleteModal');
  const deleteModalClose = document.getElementById('deleteModalClose');
  const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
  const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

  // Create event button
  createBtn.addEventListener('click', () => {
    openCreateModal();
  });

  // Close modal buttons
  modalClose.addEventListener('click', closeModal);
  cancelBtn.addEventListener('click', closeModal);

  // Close delete modal buttons
  deleteModalClose.addEventListener('click', closeDeleteModal);
  cancelDeleteBtn.addEventListener('click', closeDeleteModal);

  // Confirm delete
  confirmDeleteBtn.addEventListener('click', confirmDelete);

  // Click outside modal to close
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });

  deleteModal.addEventListener('click', (e) => {
    if (e.target === deleteModal) {
      closeDeleteModal();
    }
  });

  // ESC key to close modals
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      if (modal.style.display === 'flex') {
        closeModal();
      }
      if (deleteModal.style.display === 'flex') {
        closeDeleteModal();
      }
    }
  });

  // Form submission
  eventForm.addEventListener('submit', handleFormSubmit);
}

// Open create modal
function openCreateModal() {
  isEditing = false;
  currentEventId = null;
  document.getElementById('modalTitle').textContent = 'Create New Event';
  document.getElementById('submitBtn').textContent = 'Create Event';
  document.getElementById('eventForm').reset();
  document.getElementById('eventId').value = '';
  document.getElementById('eventModal').style.display = 'flex';
  document.getElementById('eventName').focus();
}

// Edit event
async function editEvent(eventId) {
  const event = events.find(e => e.id === eventId);
  if (!event) return;

  isEditing = true;
  currentEventId = eventId;
  document.getElementById('modalTitle').textContent = 'Edit Event';
  document.getElementById('submitBtn').textContent = 'Update Event';
  document.getElementById('eventId').value = eventId;
  document.getElementById('eventName').value = event.name;
  document.getElementById('eventDate').value = event.event_date || '';
  document.getElementById('eventDescription').value = event.description || '';
  document.getElementById('eventModal').style.display = 'flex';
  document.getElementById('eventName').focus();
}

// Handle form submission
async function handleFormSubmit(e) {
  e.preventDefault();

  const eventData = {
    name: document.getElementById('eventName').value.trim(),
    event_date: document.getElementById('eventDate').value || null,
    description: document.getElementById('eventDescription').value.trim() || null
  };

  try {
    let response;

    if (isEditing) {
      response = await fetch(`/api/events/${currentEventId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(eventData)
      });
    } else {
      response = await fetch('/api/events', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(eventData)
      });
    }

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || 'Failed to save event');
    }

    closeModal();
    window.NotificationManager.success(isEditing ? 'Event updated successfully!' : 'Event created successfully!');
  } catch (error) {
    console.error('Error saving event:', error);
    window.NotificationManager.error(error.message);
  }
}

// Close modal
function closeModal() {
  document.getElementById('eventModal').style.display = 'none';
  document.getElementById('eventForm').reset();
  isEditing = false;
  currentEventId = null;
}

// Show delete confirmation modal
function showDeleteModal(eventId) {
  currentEventId = eventId;
  document.getElementById('deleteModal').style.display = 'flex';
}

// Close delete modal
function closeDeleteModal() {
  document.getElementById('deleteModal').style.display = 'none';
  currentEventId = null;
}

// Confirm delete
async function confirmDelete() {
  if (!currentEventId) return;

  try {
    const response = await fetch(`/api/events/${currentEventId}`, {
      method: 'DELETE'
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || 'Failed to delete event');
    }

    closeDeleteModal();
  } catch (error) {
    console.error('Error deleting event:', error);
    window.NotificationManager.error(error.message);
    closeDeleteModal();
  }
}

// Open event registration page
function openEvent(eventId) {
  window.location.href = `/register.html?eventId=${eventId}`;
}

// Format date
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });
}

// Format date and time
function formatDateTime(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const diff = now - date;

  // If less than 1 minute ago
  if (diff < 60000) {
    return 'Just now';
  }

  // If less than 1 hour ago
  if (diff < 3600000) {
    const minutes = Math.floor(diff / 60000);
    return `${minutes} min${minutes > 1 ? 's' : ''} ago`;
  }

  // If today
  if (date.toDateString() === now.toDateString()) {
    return date.toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  // Otherwise show date
  return formatDate(dateString);
}

// Escape HTML to prevent XSS
function escapeHtml(text) {
  if (!text) return '';
  const map = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#039;'
  };
  return text.replace(/[&<>"']/g, m => map[m]);
}

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
  if (eventSource) {
    eventSource.close();
  }
});
